---
https://runebook.dev/zh-CN/docs/ocaml/coreexamples
http://xahlee.info/ocaml/ocaml_list.html

---match vs if else
https://stackoverflow.com/questions/7536633/ocaml-pattern-matching-vs-if-else-statements

---let in
https://www2.ocaml.org/learn/tutorials/structure_of_ocaml_programs.zh.html
局部"变量"(实际是局部表达式)
我们来看C中的average函数并且加一个局部变量。

double average (double a, double b)
{
  double sum = a + b;
  return sum / 2;
}
现在来对OCaml版本做同样的事：

let average a b =
  let sum = a +. b in
  sum /. 2.0;;
标准短语let name = expression in用来定义一个命名的局部表达式。以后name在这个函数中就可以用来代替expression，直到一个;;结束本代码块。注意我们在in之后并不缩进.只要把let ... in看作是一个整体就可以。

---nested function
现在你明白了吧？嵌套函数在OCaml中是非常有用也是非常常用的。下面是真实代码中的嵌套函数的例子：

let read_whole_channel chan =
  let buf = Buffer.create 4096 in
  let rec loop () =
    let newline = input_line chan in
    Buffer.add_string buf newline;
    Buffer.add_char buf '\n';
    loop ()
  in
  try
    loop ()
  with
    End_of_file -> Buffer.contents buf;;
   
  ---下面的代码完全合法（并且都是作同样一件事）：
  let f x b y = if b then x+y else x+0
let f x b y = x + (if b then y else 0)
let f x b y = x + (match b with true -> y | false -> 0)
let f x b y = x + (let g z = function true -> z | false -> 0 in g y b)
let f x b y = x + (let _ = y + 3 in (); if b then y else 0)


---
Types, just like functions, may be recursively-defined. We extend our data type to allow mixing of colours:

# type colour =
    | Red
    | Green
    | Blue
    | Yellow
    | RGB of float * float * float
    | Mix of float * colour * colour;;
    
We can use records directly in the data type instead to label our components:

# type colour =
    | Red
    | Green
    | Blue
    | Yellow
    | RGB of {r : float; g : float; b : float}
    | Mix of {proportion : float; c1 : colour; c2 : colour};;

https://ocaml.org/learn/tutorials/data_types_and_matching.html

---函数式编程
什么是函数式编程
https://ocaml.org/learn/tutorials/functional_programming.zh.html

---可以使用try…with构造来捕获异常：
https://runebook.dev/zh-CN/docs/ocaml/coreexamples
  # let name_of_binary_digit digit = try List.assoc digit [0, "zero"; 1, "one"] with Not_found -> "not a binary digit";; val name_of_binary_digit : int -> string = <fun>  # name_of_binary_digit 0;; - : string = "zero"  # name_of_binary_digit (-1);; - : string = "not a binary digit" 

